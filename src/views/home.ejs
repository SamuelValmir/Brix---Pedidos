<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="./images/Brix_logo.jpeg" type="image/x-icon">

    <!-- Bootstrap CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>

    <!-- Jquery CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.slim.min.js" integrity="sha256-u7e5khyithlIdTpu22PHhENmPcRdFiHRjhAuHcs05RI=" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="./css/style.css">
    <link rel="stylesheet" href="./css/indexStyle.css">
    <title>Pedidos</title>
</head>

<body>
    <div class="container-fluid p-5" id="mainContainer">
        <a type="button" class="btn btn-primary mb-5" href="/editTable">Adicionar Nova Tabela</a>

        <div class="overflow-auto mb-5" id="tableContainer">
            <table class="table table-striped-columns table-hover table-bordered" id="customTable"> </table>
        </div>

        <div class="mb-5">
            <h5>Itens selecionados</h5>
            <table class="table table-bordered" id="selectedItems">
                <thead>
                    <th>Quantidade</th>
                    <th>Alterar Quant.</th>
                    <th>Descrição</th>
                    <th>Preço Total</th>
                    <th>Preço Com Serviço</th>
                    <th>Deletar</th>
                </thead>
                <tbody></tbody>
            </table>
            <div id="noSelectedItem">Nenhum Item Selecionado.</div>
        </div>

        <form class="w-50 visually-hidden" id="form">
            <table class="table table-borderless">

                <tr>
                    <td> <label> Cliente: <span class="text-danger">*</span> </label></td>
                    <td><input class="w-100" type="text" id="name" required> </td>
                </tr>

                <tr>
                    <td> <label> Número: <span class="text-danger">*</span></label></td>
                    <td><input class="w-100" type="number" id="houseNumber" required></td>
                </tr>

                <tr>
                    <td> <label> Endereço: <span class="text-danger">*</span></label></td>
                    <td><input class="w-100" type="text" id="address" required></td>
                </tr>

                <tr>
                    <td> <label> Cidade: </label></td>
                    <td><input class="w-100" type="text" id="city"></td>
                </tr>

                <tr>
                    <td> <label> Cep: </label></td>
                    <td><input class="w-100" type="text" id="cep"></td>
                </tr>

                <tr>
                    <td> <label> Bairro: </label></td>
                    <td><input class="w-100" type="text" id="district"></td>
                </tr>

                <tr>
                    <td><label> Telefone: <span class="text-danger">*</span></label></td>
                    <td><input class="w-100" type="tel" id="tel" required></td>
                </tr>

                <tr>
                    <td><label> E-mail: </label></td>
                    <td><input class="w-100" type="email" id="email"></td>
                </tr>

                <tr>
                    <td><label> Observação </label></td>
                    <td><textarea class="w-100" id="observation" oninput="autoGrowObservationField(this)"></textarea></td>
                </tr>

                <tr>
                    <td> <label> Forma de Pagamento: </label></td>

                    <td id="paymentMethods">
                        <input type="radio" id="radioCashPayment" name="radioPayment" checked value="A vista" onchange="setDropdownVisibility(false)">
                        <label>A vista</label>

                        <div class="dropdown d-flex">
                            <input type="radio" id="radioInstallmentPayment" name="radioPayment" value="Parcelado" data-installments="2" data-newTotalPrice="" onchange="setDropdownVisibility(true, this.getAttribute('data-installments'))">
                            <label class="ps-1 pe-2">Parcelado</label>
                            <button class="btn btn-outline-primary dropdown-toggle visually-hidden" type="button" id="installmentPaymentDropdownToggle" data-bs-toggle="dropdown">2x</button>
                            <ul class="dropdown-menu text-center">
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">2x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">3x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">4x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">5x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">6x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">7x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">8x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">9x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">10x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">11x</li>
                                <li class="dropdown-item" onclick="updateInstallmentPayment(this.innerText)">12x</li>
                            </ul>
                        </div>
                    </td>
                </tr>

                <tr>
                    <td><label> Valor Total: </label></td>
                    <td><input class="w-100" type="text" id="formTotalPrice" value="0.00 R$" disabled></td>
                </tr>

                <tr class="visually-hidden" id="rowInstallmentPrice">
                    <td><label> Valor Parcelado: </label></td>
                    <td><input class="w-100" type="text" id="formInstallmentPrice" value="0.00 R$" disabled></td>
                </tr>

                <tr class="visually-hidden" id="rowFees">
                    <td><label> Juros: </label></td>
                    <td><input class="w-100" type="text" id="formFees" value="0.00 R$" disabled></td>
                </tr>

                <tr class="visually-hidden" id="rowFeesRate">
                    <td><label> Taxa de Juros: </label></td>
                    <td><input class="w-100" type="text" id="formFeesRate" value="0.00 %" disabled></td>
                </tr>

                <tr>
                    <td><label> Valor Final (R$): </label></td>
                    <td><input class="w-100" type="number" step=".01" min="0" id="formFinalPrice" value="0.00" oninput="formFinalPriceListener(Number(this.value))"></td>
                </tr>

                <tr class="d-flex mt-5">
                    <td>
                        <button type="submit" class="btn btn-success">Gerar Documento</button>
                    </td>
                    <td>
                        <button type="reset" class="btn btn-danger" onclick="{
                            setDropdownVisibility(false);
                            setInstallmentPriceVisibility(false);
                            }">Apagar Campos </button>
                    </td>
                </tr>
            </table>
        </form>
    </div>

    <div class="modal fade" id="selectItemModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>Atenção</h5>
                    <button class="btn-close"></button>
                </div>

                <div class="modal-body">
                    Você Precisa Selecionar Pelo Menos Um Produto Para Prosseguir.
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ok</button>
                </div>
            </div>

        </div>
    </div>

    <div class="bg-dark w-100 h-100 position-absolute top-0 bg-opacity-50 d-flex justify-content-center align-items-center flex-column visually-hidden" id="loader-container">
        <div class="spinner-border text-primary fs-1" id="loader"></div>
        <div class="text-light pt-5 fs-2">Carregando Documento</div>
    </div>


    <!-- <script src="./js/model/client.js"></script> -->
    <script src="./js/model/selectedItem.js"></script>
    <script src="./js/model/selectedItems.js"></script>
    <script src="./js/controller/index.js"></script>
    <script src="./js/controller/selectedItems.js"></script>
    <script src="./js/controller/selectedItems.js"></script>
    <script src="./js/controller/tableTest.js"></script>
    <script src="./js/controller/manualItems.js"></script>
    <script src="./js/communicateWithServer.js"></script>
    <script src="./js/getDate.js"></script>

    <script>
        // const intelbrasTable = localStorage.getItem("intelbrasTable");

        // if (intelbrasTable) {
        //     showLoaderScreen();
        //     disableScroll();
        //     writeTable(Object.values(JSON.parse(intelbrasTable)), "productsTable", false)
        //         .then(() => {
        //             hideLoaderScreen();
        //             enableScroll();

        //         });
        // } else {

        showLoaderScreen();
        disableScroll();

        getTableTestFromServer()
            .then(tableJson => {

                hideLoaderScreen();
                enableScroll();

                if (tableJson) {
                    // localStorage.setItem("intelbrasTable", JSON.stringify(tableJson));
                    writeTable(Object.values(tableJson), "customTable", false)
                        .then(() => {
                            // Add event listener in each checkbox of automatic service column (First column)
                            document.getElementById("tableContainer").style.height = "30rem";
                            [...document.querySelectorAll("[data-cell='0'] input")].forEach(checkbox => {
                                checkbox.addEventListener("click", automaticServiceInputListener);
                            });
                        });
                } else {
                    document.querySelector("table").innerText = "Nenhuma tabela selecionada";
                };
            });
        // }

        // showLoaderScreen();
        // disableScroll();
        // getIntelbrasHTMLTable().then(tableHTML => {
        //     document.getElementById("customTable").innerHTML = tableHTML;
        //     document.getElementById("tableContainer").style.height = "30rem";
        //     hideLoaderScreen();
        //     enableScroll();
        // })


        document.querySelector("form").addEventListener("submit", e => {
            e.preventDefault();
            tryGenerateDocument();
        });

        function autoGrowObservationField(textarea) {
            textarea.style.height = "1px";
            textarea.style.height = textarea.scrollHeight + "px";
        };

        function changeFormVisibility(show) {
            const form = document.querySelector("#form");

            if (show) {
                form.classList.remove("visually-hidden");
            } else {
                form.classList.add("visually-hidden");
            };
        };

        function updateInstallmentPayment(text) {
            document.querySelector("#installmentPaymentDropdownToggle").innerText = text;

            const installments = parseInt(text);

            changeRadioInstallments(installments);
            changeItemsDiscount(false, installments);

            setInstallmentPriceVisibility(true);
        };

        function setDropdownVisibility(show, installments = null) {
            const dropdownToggleButton = document.querySelector("#installmentPaymentDropdownToggle");

            if (show) {
                changeItemsDiscount(false, installments);
                dropdownToggleButton.classList.remove("visually-hidden");
                setInstallmentPriceVisibility(true);
                setFeesVisibility(true);
                setFeesRateVisibility(true);
            } else {
                changeItemsDiscount(true);
                dropdownToggleButton.classList.add("visually-hidden");
                setInstallmentPriceVisibility(false);
                setFeesVisibility(false);
                setFeesRateVisibility(false);
            };

            updateFormPayment();
        };

        function updateFormPayment() {
            document.querySelector("#formTotalPrice").value = getTotalPrice() + " R$";
            updateFormInstallmentPrice();
            updateFormFinalPrice();
        };

        function updateFormFinalPrice() {
            document.querySelector("#formFinalPrice").value = getFinalPrice();
        };

        function formFinalPriceListener(formFinalPrice) {
            document.querySelector("#formFinalPrice").setAttribute("min", formFinalPrice);

            const feesRate = (formFinalPrice - getTotalPrice()) / getTotalPrice();
            const fees = formFinalPrice * feesRate;

            setFinalPrice(formFinalPrice);
            setFees(fees);
            setFeesRate(feesRate);

            updateFormInstallmentPrice();
            updateFormFees();
            updateFormFeesRate();
        };

        function updateFormInstallmentPrice() {
            document.querySelector("#formInstallmentPrice").value = `${getInstallments()} x ${getInstallmentPrice().toFixed(2)} R$`;
        };

        function updateFormFees(fees) {
            document.querySelector("#formFees").value = getFees().toFixed(3) + " R$";
        };

        function updateFormFeesRate(feesRate) {
            document.querySelector("#formFeesRate").value = (getFeesRate() * 100).toFixed(3) + " %";
        };

        function changeRadioInstallments(installments) {
            const radio = document.querySelector("#radioInstallmentPayment");
            radio.setAttribute("data-installments", installments)
        };

        function changeRadioNewTotalPrice(newTotalPrice) {
            const radio = document.querySelector("#radioInstallmentPayment");
            radio.setAttribute("data-newTotalPrice", newTotalPrice)
        };

        function setFeesVisibility(visibility) {
            const feesContainer = document.querySelector("#rowFees");
            const feesElement = document.querySelector("#formFees");

            if (visibility) {
                feesContainer.classList.remove("visually-hidden");
                feesContainer.removeAttribute("disabled");
                feesElement.value = "0.000 R$";
                setFees(feesElement.value);
            } else {
                setFees(0);
                feesContainer.classList.add("visually-hidden");
                feesContainer.setAttribute("disabled", true);
            };
        };

        function setFeesRateVisibility(visibility) {
            const feesRateContainer = document.querySelector("#rowFeesRate");
            const feesRateElement = document.querySelector("#formFeesRate");

            if (visibility) {
                feesRateContainer.classList.remove("visually-hidden");
                feesRateContainer.removeAttribute("disabled");
                feesRateElement.value = "0.000 %";
                setFeesRate(feesRateElement.value);
            } else {
                setFeesRate(0);
                feesRateContainer.classList.add("visually-hidden");
                feesRateContainer.setAttribute("disabled", true);
            };
        };

        function setInstallmentPriceVisibility(visibility) {
            const installmentPriceContainer = document.querySelector("#rowInstallmentPrice");

            if (visibility) {
                installmentPriceContainer.classList.remove("visually-hidden");
                installmentPriceContainer.removeAttribute("disabled");
                updateFormInstallmentPrice();
            } else {
                installmentPriceContainer.classList.add("visually-hidden");
                installmentPriceContainer.setAttribute("disabled", true);
            };
        };

        function tryGenerateDocument() {
            let canGenerate = true;

            const selectItemModal = new bootstrap.Modal(document.getElementById("selectItemModal"));
            if (!document.querySelector("#noSelectedItem").classList.contains("visually-hidden")) {
                canGenerate = false;
                // selectItemModal.show();
                alert("Você precisa selecionar pelo menos um item para prosseguir.")
            };

            // if (canGenerate) {
            if (true) {
                const checkedRadio = document.querySelector("#paymentMethods input[name=radioPayment]:checked");

                const clientData = {};
                clientData.name = document.getElementById("name").value;
                clientData.houseNumber = Number(document.getElementById("houseNumber").value);
                clientData.address = document.getElementById("address").value;
                clientData.city = document.getElementById("city").value;
                clientData.cep = document.getElementById("cep").value;
                clientData.district = document.getElementById("district").value;
                clientData.tel = document.getElementById("tel").value;
                clientData.email = document.getElementById("email").value;
                clientData.observation = document.getElementById("observation").value;
                clientData.paymentMethod = checkedRadio.value;
                clientData.totalPrice = parseFloat(document.getElementById("formTotalPrice").value);
                clientData.finalPrice = parseFloat(document.getElementById("formFinalPrice").value);

                clientData.products = getSelectedItemsObject();

                const data = {clientData, date: getCurrentDate() }
                generateDocument(JSON.stringify(data));
            };
        };

        function generateDocument(data) {
            sessionStorage.setItem("data", data);
            window.location.href = "/generateContract";
        };
    </script>

</body>

</html>